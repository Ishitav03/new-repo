This is my code for the file upload but it doesn't have that good UI so I want UI of other code. Can you combine both well so that Ui I get from othee code but my code works well.

import React, { useState } from 'react';
import axios from 'axios';
const FileUpload = () => {
  const [file, setFile] = useState(null);
  const [fileType, setFileType] = useState('csv');
  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };
  const handleFileTypeChange = (event) => {
    setFileType(event.target.value);
  };
  const handleFileUpload = () => {
    const reader = new FileReader();
    reader.onload = async (event) => {
      const fileContent = event.target.result;
      const data = {
        data: fileContent,
        fileType: fileType,
      };
      console.log(data);
      try {
        const response = await axios.post('http://localhost:8080/api/convert', data, {
              responseType: 'blob',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        let file;
        if(fileType==='excel'){
            file = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        }
        else if(fileType==='csv'){
         file = new Blob([response.data], { type: `text/csv` });
        }
        else if(fileType==='pdf'){
            file = new Blob([response.data], { type: `application/pdf` });
        }
    // Create an URL for the file
    const fileURL = URL.createObjectURL(file);
    // Create a temporary link to trigger the download
    const fileLink = document.createElement('a');
    fileLink.href = fileURL;
    if(fileType==='excel')
    {
    fileLink.setAttribute('download', 'file.xlsx');
    }
    else if(fileType==='csv'){
    fileLink.setAttribute('download', 'file.csv'); // or any other extension
    }
    else if(fileType==='pdf') {
        fileLink.setAttribute('download', 'file.pdf');
    }
    document.body.appendChild(fileLink);
    fileLink.click();
    document.body.removeChild(fileLink);
        console.log(response.data);
      } catch (error) {
        alert('Invalid JSON')
        // console.error('Error uploading file:', error.message);
      }
    };
    if (file) {
      reader.readAsText(file);
    }
  };
  return (
    <div>
      <input type="file" onChange={handleFileChange} />
      <select value={fileType} onChange={handleFileTypeChange}>
        <option value="csv">CSV</option>
        <option value="pdf">PDF</option>
        <option value="excel">Excel</option>
      </select>
      <button onClick={handleFileUpload}>Upload</button>
    </div>
  );
};
export default FileUpload;

Other code:

import React, { useCallback, useState, useEffect } from "react";
import { useDropzone } from "react-dropzone";

const FileUploadBox = () => {
  const [files, setFiles] = useState([]);

  const onDrop = useCallback((acceptedFiles) => {
    const updatedFiles = acceptedFiles.map((file) => ({
      file: file,
      preview: file.type.startsWith("image/")
        ? URL.createObjectURL(file)
        : null,
      size: (file.size / 1024).toFixed(2) + " kb",
      progress: 0,
      conversionType: null,
    }));

    setFiles((prevFiles) => [...prevFiles, ...updatedFiles]);

    updatedFiles.forEach(uploadFile);
  }, []);

  const uploadFile = (file) => {
    const uploadProgress = setInterval(() => {
      setFiles((prevFiles) =>
        prevFiles.map((prevFile) => {
          if (prevFile.file === file.file) {
            const newProgress = prevFile.progress + 10;
            if (newProgress >= 100) {
              clearInterval(uploadProgress);
              return { ...prevFile, progress: 100 };
            }
            return { ...prevFile, progress: newProgress };
          }
          return prevFile;
        })
      );
    }, 200);
  };

  useEffect(() => {
    // Clean up function to revoke object URLs
    return () => {
      files.forEach((file) => {
        if (file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
    };
  }, [files]);

  const handleConversionTypeChange = (file, conversionType) => {
    setFiles((prevFiles) =>
      prevFiles.map((prevFile) =>
        prevFile.file === file ? { ...prevFile, conversionType } : prevFile
      )
    );
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: true,
  });

  return (
    <div className="upload-container">
      <div {...getRootProps()} className={`dropzone ${isDragActive ? "active" : ""}`}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop files here ...</p>
        ) : (
          <p>Drop files here / click to select files</p>
        )}
      </div>
      {files.map((file) => (
        <div className="file-container" key={file.file.name}>
          <div className="file-preview">
            {file.preview ? (
              <img
                src={file.preview}
                alt={file.file.name}
                className="preview-image"
              />
            ) : (
              <div className="file-icon">
                <p>{file.file.name}</p>
              </div>
            )}
            <div className="file-details">
              <div className="file-detail">
                <strong>Name:</strong> {file.file.name}
              </div>
              <div className="file-detail">
                <strong>Size:</strong> {file.size}
              </div>
              <div className="file-detail">
                <strong>Status:</strong> {file.progress}%
              </div>
              <div className="progress-bar">
                <div
                  className="progress"
                  style={{ width: `${file.progress}%` }}
                ></div>
              </div>
            </div>
          </div>
          <div className="conversion-options">
            <label>Convert to:</label>
            <select
              value={file.conversionType || ""}
              onChange={(e) =>
                handleConversionTypeChange(file, e.target.value)
              }
            >
              <option value="">Select...</option>
              <option value="csv">CSV</option>
              <option value="txt">TXT</option>
              <option value="xml">XML</option>
              <option value="pdf">PDF</option>
              <option value="doc">DOC</option>
            </select>
          </div>
        </div>
      ))}
    </div>
  );
};

export default FileUploadBox;



