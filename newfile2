import React, { useCallback, useState, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import axios from "axios";
import './FileUploadBox.css';

const FileUploadBox = () => {
  const [files, setFiles] = useState([]);

  const onDrop = useCallback((acceptedFiles) => {
    const updatedFiles = acceptedFiles.map((file) => ({
      file: file,
      preview: file.type.startsWith("image/") ? URL.createObjectURL(file) : null,
      size: (file.size / 1024).toFixed(2) + " KB",
      progress: 0,
      conversionType: 'csv',
      status: 'pending',
    }));

    setFiles((prevFiles) => [...prevFiles, ...updatedFiles]);

    updatedFiles.forEach(uploadFile);
  }, []);

  const uploadFile = (fileObj) => {
    const reader = new FileReader();
    reader.onload = async (event) => {
      const fileContent = event.target.result;
      const data = {
        data: fileContent,
        fileType: fileObj.conversionType,
      };

      try {
        const response = await axios.post('http://localhost:8080/api/convert', data, {
          responseType: 'blob',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        let file;
        if (fileObj.conversionType === 'excel') {
          file = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        } else if (fileObj.conversionType === 'csv') {
          file = new Blob([response.data], { type: 'text/csv' });
        } else if (fileObj.conversionType === 'pdf') {
          file = new Blob([response.data], { type: 'application/pdf' });
        }

        const fileURL = URL.createObjectURL(file);
        const fileLink = document.createElement('a');
        fileLink.href = fileURL;
        fileLink.setAttribute('download', `file.${fileObj.conversionType}`);
        document.body.appendChild(fileLink);
        fileLink.click();
        document.body.removeChild(fileLink);

        setFiles((prevFiles) => prevFiles.map((prevFile) =>
          prevFile.file === fileObj.file ? { ...prevFile, progress: 100, status: 'uploaded' } : prevFile
        ));
      } catch (error) {
        setFiles((prevFiles) => prevFiles.map((prevFile) =>
          prevFile.file === fileObj.file ? { ...prevFile, status: 'error' } : prevFile
        ));
        alert('Invalid JSON');
      }
    };

    if (fileObj.file) {
      reader.readAsText(fileObj.file);
    }
  };

  const handleConversionTypeChange = (file, conversionType) => {
    setFiles((prevFiles) =>
      prevFiles.map((prevFile) =>
        prevFile.file === file ? { ...prevFile, conversionType } : prevFile
      )
    );
  };

  useEffect(() => {
    return () => {
      files.forEach((file) => {
        if (file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
    };
  }, [files]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: '.json,application/json,text/plain',
    multiple: true,
  });

  return (
    <div className="upload-container">
      <div {...getRootProps()} className={`dropzone ${isDragActive ? "active" : ""}`}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop files here ...</p>
        ) : (
          <p>Drop JSON files here / Click to select JSON files</p>
        )}
      </div>
      {files.map((fileObj) => (
        <div className="file-container" key={fileObj.file.name}>
          <div className="file-preview">
            {fileObj.preview ? (
              <img src={fileObj.preview} alt={fileObj.file.name} className="preview-image" />
            ) : (
              <div className="file-icon">
                <p>{fileObj.file.name}</p>
              </div>
            )}
            <div className="file-details">
              <div className="file-detail">
                <strong>Name:</strong> {fileObj.file.name}
              </div>
              <div className="file-detail">
                <strong>Size:</strong> {fileObj.size}
              </div>
              <div className="file-detail">
                <strong>Status:</strong> {fileObj.progress}%
              </div>
              <div className="progress-bar">
                <div className="progress" style={{ width: `${fileObj.progress}%` }}></div>
              </div>
            </div>
          </div>
          {fileObj.status === 'uploaded' && (
            <div className="conversion-options">
              <label>Convert to:</label>
              <select
                value={fileObj.conversionType}
                onChange={(e) => handleConversionTypeChange(fileObj.file, e.target.value)}
              >
                <option value="csv">CSV</option>
                <option value="pdf">PDF</option>
                <option value="excel">Excel</option>
              </select>
              <button onClick={() => uploadFile(fileObj)}>Convert</button>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default FileUploadBox;
