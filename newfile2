import React, { useState } from 'react';
import axios from 'axios';
import './FileUpload.css'; // Ensure you have corresponding CSS styles for FileUpload

const FileUpload = () => {
  const [file, setFile] = useState(null);
  const [fileType, setFileType] = useState('csv');
  const [isPreparingFile, setIsPreparingFile] = useState(false); // State to track file preparation
  const [uploadProgress, setUploadProgress] = useState(0); // State to track upload progress
  const [isUploading, setIsUploading] = useState(false); // State to track if upload is in progress

  const handleFileChange = (event) => {
    setIsPreparingFile(true); // Set state to indicate file preparation
    setFile(event.target.files[0]);
    setIsPreparingFile(false); // Reset state after file is selected
  };

  const handleFileTypeChange = (event) => {
    setFileType(event.target.value);
  };

  const handleFileUpload = async () => {
    setIsUploading(true);

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post('http://localhost:8080/api/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);
          setUploadProgress(progress);
        },
      });

      // Assuming the backend returns a file ID or name
      const fileName = response.data.fileName;

      const conversionResponse = await axios.post('http://localhost:8080/api/convert', {
        fileName,
        fileType,
      }, {
        responseType: 'blob',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const fileBlob = new Blob([conversionResponse.data], { type: `application/${fileType}` });
      const fileURL = URL.createObjectURL(fileBlob);
      const fileLink = document.createElement('a');
      fileLink.href = fileURL;
      fileLink.setAttribute('download', `file.${fileType}`);
      document.body.appendChild(fileLink);
      fileLink.click();
      document.body.removeChild(fileLink);

      setIsUploading(false);
      setUploadProgress(0);
    } catch (error) {
      setIsUploading(false);
      setUploadProgress(0);
      alert('Error uploading file. Please try again.');
      console.error('Error uploading file:', error.message);
    }
  };

  return (
    <div className="file-upload-container">
      <label className="file-upload-label">
        <input type="file" onChange={handleFileChange} className="file-input" />
        {isPreparingFile && <span className="file-loading">Preparing file...</span>}
        {file && (
          <div className="file-details">
            <span className="file-name">{file.name}</span>
            <span className="file-size">{(file.size / 1024).toFixed(2)} KB</span>
          </div>
        )}
        {!file && !isPreparingFile && (
          <span className="file-placeholder">Drag and drop a file here or click to select</span>
        )}
      </label>
      {file && (
        <React.Fragment>
          <select value={fileType} onChange={handleFileTypeChange} className="file-type-select">
            <option value="csv">CSV</option>
            <option value="pdf">PDF</option>
            <option value="excel">Excel</option>
          </select>
          <button onClick={handleFileUpload} className="file-upload-button" disabled={isUploading}>
            {isUploading ? 'Uploading...' : 'Upload'}
          </button>
          {isUploading && (
            <div className="progress">
              <div
                className="progress-bar"
                style={{ width: `${uploadProgress}%` }}
                role="progressbar"
                aria-valuenow={uploadProgress}
                aria-valuemin="0"
                aria-valuemax="100"
              >
                {uploadProgress}%
              </div>
            </div>
          )}
        </React.Fragment>
      )}
    </div>
  );
};

export default FileUpload;





.file-upload-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.file-upload-label {
  display: block;
  width: 300px;
  height: 100px;
  border: 2px dashed #ccc;
  border-radius: 5px;
  text-align: center;
  line-height: 100px;
  overflow: hidden;
  cursor: pointer;
}

.file-input {
  display: none;
}

.file-loading {
  display: block;
  font-size: 14px;
  margin-top: 10px;
}

.file-details {
  margin-top: 10px;
  display: flex;
  justify-content: space-between;
}

.file-name,
.file-size {
  font-size: 14px;
}

.file-placeholder {
  display: block;
  font-size: 14px;
  color: #aaa;
  margin-top: 10px;
}

.file-type-select {
  margin-top: 10px;
  padding: 5px;
  font-size: 14px;
}

.file-upload-button {
  margin-top: 10px;
  padding: 8px 16px;
  font-size: 16px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
}

.file-upload-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.progress {
  width: 100%;
  height: 20px;
  background-color: #f2f2f2;
  border-radius: 5px;
  margin-top: 10px;
}

.progress-bar {
  height: 100%;
  line-height: 20px;
  color: #fff;
  text-align: center;
  background-color: #007bff;
  border-radius: 5px;
}





