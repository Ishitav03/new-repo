import React, { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import axios from "axios";
import './FileUploadBox.css';

const FileUploadBox = () => {
  const [files, setFiles] = useState([]);
  const [fileType, setFileType] = useState('csv');

  const onDrop = useCallback((acceptedFiles) => {
    const updatedFiles = acceptedFiles.map((file) => ({
      file: file,
      preview: file.type.startsWith("image/")
        ? URL.createObjectURL(file)
        : null,
      size: (file.size / 1024).toFixed(2) + " kb",
      progress: 0,
      status: 'pending'
    }));

    setFiles((prevFiles) => [...prevFiles, ...updatedFiles]);

    updatedFiles.forEach(uploadFile);
  }, []);

  const uploadFile = (fileObj) => {
    const reader = new FileReader();
    reader.onload = async (event) => {
      const fileContent = event.target.result;
      const data = {
        data: fileContent,
        fileType: fileType,
      };

      try {
        const response = await axios.post('http://localhost:8080/api/convert', data, {
          responseType: 'blob',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        let file;
        if(fileType === 'excel'){
          file = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        } else if(fileType === 'csv'){
          file = new Blob([response.data], { type: `text/csv` });
        } else if(fileType === 'pdf'){
          file = new Blob([response.data], { type: `application/pdf` });
        }

        // Create an URL for the file
        const fileURL = URL.createObjectURL(file);
        // Create a temporary link to trigger the download
        const fileLink = document.createElement('a');
        fileLink.href = fileURL;
        if(fileType === 'excel') {
          fileLink.setAttribute('download', 'file.xlsx');
        } else if(fileType === 'csv'){
          fileLink.setAttribute('download', 'file.csv'); // or any other extension
        } else if(fileType === 'pdf') {
          fileLink.setAttribute('download', 'file.pdf');
        }
        document.body.appendChild(fileLink);
        fileLink.click();
        document.body.removeChild(fileLink);
      } catch (error) {
        alert('Invalid JSON');
      }
    };

    reader.readAsText(fileObj.file);
  };

  const handleConversionTypeChange = (file, conversionType) => {
    setFiles((prevFiles) =>
      prevFiles.map((prevFile) =>
        prevFile.file === file ? { ...prevFile, conversionType } : prevFile
      )
    );
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: true,
  });

  useEffect(() => {
    // Clean up function to revoke object URLs
    return () => {
      files.forEach((file) => {
        if (file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
    };
  }, [files]);

  return (
    <div className="upload-container">
      <div {...getRootProps()} className={`dropzone ${isDragActive ? "active" : ""}`}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop files here ...</p>
        ) : (
          <p>Drop JSON files here / Click to select JSON files</p>
        )}
      </div>
      <div>
        <select value={fileType} onChange={(e) => setFileType(e.target.value)}>
          <option value="csv">CSV</option>
          <option value="pdf">PDF</option>
          <option value="excel">Excel</option>
        </select>
      </div>
      {files.map((file) => (
        <div className="file-container" key={file.file.name}>
          <div className="file-preview">
            {file.preview ? (
              <img
                src={file.preview}
                alt={file.file.name}
                className="preview-image"
              />
            ) : (
              <div className="file-icon">
                <p>{file.file.name}</p>
              </div>
            )}
            <div className="file-details">
              <div className="file-detail">
                <strong>Name:</strong> {file.file.name}
              </div>
              <div className="file-detail">
                <strong>Size:</strong> {file.size}
              </div>
              <div className="file-detail">
                <strong>Status:</strong> {file.progress}%
              </div>
              <div className="progress-bar">
                <div
                  className="progress"
                  style={{ width: `${file.progress}%` }}
                ></div>
              </div>
            </div>
          </div>
          <div className="conversion-options">
            <label>Convert to:</label>
            <select
              value={file.conversionType || ""}
              onChange={(e) =>
                handleConversionTypeChange(file.file, e.target.value)
              }
            >
              <option value="">Select...</option>
              <option value="csv">CSV</option>
              <option value="txt">TXT</option>
              <option value="xml">XML</option>
              <option value="pdf">PDF</option>
              <option value="doc">DOC</option>
            </select>
          </div>
        </div>
      ))}
    </div>
  );
};

export default FileUploadBox;
