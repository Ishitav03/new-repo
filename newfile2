import React, { useCallback, useState, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import axios from "axios";
import './FileUploadBox.css';

const FileUploadBox = () => {
  const [files, setFiles] = useState([]);

  const onDrop = useCallback((acceptedFiles) => {
    const updatedFiles = acceptedFiles.map((file) => ({
      file: file,
      preview: file.type.startsWith("image/")
        ? URL.createObjectURL(file)
        : null,
      size: (file.size / 1024).toFixed(2) + " KB",
      progress: 0,
      conversionType: null,
    }));

    setFiles((prevFiles) => [...prevFiles, ...updatedFiles]);
  }, []);

  useEffect(() => {
    // Clean up function to revoke object URLs
    return () => {
      files.forEach((file) => {
        if (file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
    };
  }, [files]);

  const handleConversionTypeChange = (file, conversionType) => {
    setFiles((prevFiles) =>
      prevFiles.map((prevFile) =>
        prevFile.file === file ? { ...prevFile, conversionType } : prevFile
      )
    );
  };

  const handleFileUpload = async (file) => {
    const formData = new FormData();
    formData.append("file", file.file);

    try {
      const response = await axios.post("http://localhost:8080/api/upload", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const progress = (progressEvent.loaded / progressEvent.total) * 100;
          setFiles((prevFiles) =>
            prevFiles.map((prevFile) =>
              prevFile.file === file.file
                ? { ...prevFile, progress }
                : prevFile
            )
          );
        },
      });

      // Assuming the backend returns a file ID or name
      return response.data.fileName;
    } catch (error) {
      console.error("Error uploading file:", error);
      return null;
    }
  };

  const handleSubmit = async () => {
    for (const file of files) {
      if (file.conversionType) {
        const fileName = await handleFileUpload(file);
        if (fileName) {
          try {
            const response = await axios.post("http://localhost:8080/api/convert", {
              fileName,
              conversionType: file.conversionType,
            }, {
              responseType: "blob",
            });

            const blob = new Blob([response.data], { type: response.headers['content-type'] });
            const downloadUrl = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = `${file.file.name.split('.')[0]}.${file.conversionType}`;
            document.body.appendChild(link);
            link.click();
            link.remove();
          } catch (error) {
            console.error("Error converting file:", error);
          }
        }
      }
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: true,
  });

  return (
    <div className="upload-container">
      <div {...getRootProps()} className={`dropzone ${isDragActive ? "active" : ""}`}>
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop files here ...</p>
        ) : (
          <p>Drop files here / click to select files</p>
        )}
      </div>
      {files.map((file) => (
        <div className="file-container" key={file.file.name}>
          <div className="file-preview">
            {file.preview ? (
              <img
                src={file.preview}
                alt={file.file.name}
                className="preview-image"
              />
            ) : (
              <div className="file-icon">
                <p>{file.file.name}</p>
              </div>
            )}
            <div className="file-details">
              <div className="file-detail">
                <strong>Name:</strong> {file.file.name}
              </div>
              <div className="file-detail">
                <strong>Size:</strong> {file.size}
              </div>
              <div className="file-detail">
                <strong>Status:</strong> {file.progress}%
              </div>
              <div className="progress-bar">
                <div
                  className="progress"
                  style={{ width: `${file.progress}%` }}
                ></div>
              </div>
            </div>
          </div>
          <div className="conversion-options">
            <label>Convert to:</label>
            <select
              value={file.conversionType || ""}
              onChange={(e) =>
                handleConversionTypeChange(file.file, e.target.value)
              }
            >
              <option value="">Select...</option>
              <option value="csv">CSV</option>
              <option value="txt">TXT</option>
              <option value="xml">XML</option>
              <option value="pdf">PDF</option>
              <option value="doc">DOC</option>
            </select>
          </div>
        </div>
      ))}
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
};

export default FileUploadBox;
