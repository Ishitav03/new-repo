import React, { useState } from 'react';
import axios from 'axios';
import './FileUpload.css'; // Ensure you have corresponding CSS styles for FileUpload

const FileUpload = () => {
  const [file, setFile] = useState(null);
  const [fileType, setFileType] = useState('csv');
  const [isLoading, setIsLoading] = useState(false);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleFileTypeChange = (event) => {
    setFileType(event.target.value);
  };

  const handleFileUpload = async () => {
    setIsLoading(true);

    const reader = new FileReader();
    reader.onload = async (event) => {
      const fileContent = event.target.result;
      const data = {
        data: fileContent,
        fileType: fileType,
      };

      try {
        const response = await axios.post('http://localhost:8080/api/convert', data, {
          responseType: 'blob',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        let fileBlob;
        switch (fileType) {
          case 'excel':
            fileBlob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            break;
          case 'csv':
            fileBlob = new Blob([response.data], { type: 'text/csv' });
            break;
          case 'pdf':
            fileBlob = new Blob([response.data], { type: 'application/pdf' });
            break;
          default:
            console.error('Unsupported file type');
            return;
        }

        const fileURL = URL.createObjectURL(fileBlob);
        const fileLink = document.createElement('a');
        fileLink.href = fileURL;
        fileLink.setAttribute('download', `file.${fileType}`);
        document.body.appendChild(fileLink);
        fileLink.click();
        document.body.removeChild(fileLink);

        setIsLoading(false);
      } catch (error) {
        setIsLoading(false);
        alert('Error converting file. Please try again.');
        console.error('Error converting file:', error.message);
      }
    };

    if (file) {
      reader.readAsText(file);
    } else {
      setIsLoading(false);
      alert('Please select a file to upload.');
    }
  };

  return (
    <div className="file-upload-container">
      <label className="file-upload-label">
        <input type="file" onChange={handleFileChange} className="file-input" />
        {file ? (
          <span className="file-selected">{file.name}</span>
        ) : (
          <span className="file-placeholder">Choose a file or drag it here</span>
        )}
      </label>
      <select value={fileType} onChange={handleFileTypeChange} className="file-type-select">
        <option value="csv">CSV</option>
        <option value="pdf">PDF</option>
        <option value="excel">Excel</option>
      </select>
      <button onClick={handleFileUpload} className="file-upload-button">
        {isLoading ? 'Uploading...' : 'Upload'}
      </button>
    </div>
  );
};

export default FileUpload;




.file-upload-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.file-upload-label {
  display: block;
  width: 300px;
  height: 100px;
  border: 2px dashed #ccc;
  border-radius: 5px;
  text-align: center;
  line-height: 100px;
  overflow: hidden;
  cursor: pointer;
}

.file-input {
  display: none;
}

.file-selected {
  display: block;
  font-size: 14px;
  margin-top: 10px;
}

.file-placeholder {
  display: block;
  font-size: 14px;
  color: #aaa;
  margin-top: 10px;
}

.file-type-select {
  margin-top: 10px;
  padding: 5px;
  font-size: 14px;
}

.file-upload-button {
  margin-top: 10px;
  padding: 8px 16px;
  font-size: 16px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
}

.file-upload-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
